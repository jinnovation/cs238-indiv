#+TITLE: Finding Elizabeth

# bullshit hackery
#+AUTHOR: Pathfinding and Alternative Realism
#+EMAIL: Jonathan Jin

#+DATE: 05/29/14

#+OPTIONS: toc:nil num:nil reveal_progress
#+REVEAL_HLEVEL: 1
#+REVEAL_ROOT: ./

* On Realism

  - *Realism* = common goal among development teams
    - Believability
    - Credibility
  - \uparrow realism \to \uparrow consumer desire \to \uparrow profit

* Graphics

  - Commonly used to achieve realism
  - *Very* good at this
    - Modern-day graphics hardware \to \downarrow tech barriers

** [[file:img/Crysis3ExplosionsBeneaththeLibertyDome.png]]
   #+BEGIN_NOTES
   Commonality among most modern-day AAA video game graphics
   #+END_NOTES
** [[file:img/1367625794.jpg]]

   #+BEGIN_NOTES
   All...
   #+END_NOTES
** [[file:img/TombRaider_2013_03_06_02_25_01_757.jpg]]

   #+BEGIN_NOTES
   Insanely...
   #+END_NOTES
** [[file:img/O0vv1b7 - Imgur.jpg]]

   #+BEGIN_NOTES
   Realistic.
   #+END_NOTES
** [[file:img/hiccups2.gif]]

   #+BEGIN_NOTES
   Exception: a couple hiccups.
   #+END_NOTES
** [[file:img/tombraider-2013-03-29-21-07-25-94.jpg]]

   #+BEGIN_NOTES
   But for most part OK.
   #+END_NOTES

** A Slight Problem

   - Visual realism = "straightforward"
     - Established tech stack + practices
   - \exists *Inherent difficulties* associated with computer graphics
     - Diminishing returns
     - *Uncanny Valley*
   - Impede increase of realism solely by graphical means
   - *Need*: new, alternative ways to \uparrow realism

* [[file:img/bsi_logo.png]]

** [[file:img/elizabeth.gif]]

** What They Did

   - Unique *path-finding algorithm* for Elizabeth
   - Goals
     - Algorithmically model *humanity* & *realistic human behavior*
       - Curiosity
       - Autonomy
       - Exploration
     - Create emotional attachment + investment to her

* The Algorithm

** Key Points

   - "Both follow and lead"
     - Balance distance to PC
       - "Too close is too creepy"
     - Free movement between PC and next *goal location*
   - Leader-follower model
   - Points of Interest (POIs)
     - Freely *inspect* + *comment on* game world objects
     
** Leader-follower model

*** Leader

    #+BEGIN_SRC java
      class Leader extends Character
      {
          private Periphery bubblePersonal;
          private Periphery bubbleFollower;

          public FlxPoint randomPointWithinRadius(int radius);
          public FlxPoint randomPointWithinBubbleFollower();

          private void handleKeypress();
          private void handleMovement();
      }
    #+END_SRC

*** Follower
      #+BEGIN_SRC java
        class Follower extends Character implements Interaction
        {
            private Leader dearLeader;

            private FlxPoint destCurr;
            private FlxSprite destMarker;

            private int destRadius;

            private Periphery bubbleSight;

            private void setDestTarget(FlxObject target);
            private void setDest(int x, int y);
            private void setDestRandom();

            public void update()
            {
                boolean isWithinRange =
                    distToPoint(this, this.destCurr) < this.destRadius;
                if (isWithinRange && (POI i = scanForPOIs()) != null)
                        setDestTarget(i);
                else
                    setDestRandom();
            }
        }
      #+END_SRC

    #+REVEAL: split

    #+BEGIN_SRC java
      class Follower extends Character implements Interaction
      {
          // ...

          public POI scanForPOIs()
          {
              foreach (i in currentStage.interactables) {
                  boolean isWithinRange
                      = distBetween(this, i) < this.bubbleSight.radius;

                  if (isWithinRange) return i;
              }
              return null;
          }

          public void update()
          {
              this.move();
              if (distanceToPoint(this, this.destCurr) < this.destRadius) {
                  if ((POI i = scanForPOIs()) != null)
                      interact(i);

                  setRandomDest();
              }
          }

          public void interact(POI item);
          public void say(String line);
      }
    #+END_SRC

*** Destination Points

    - At any given moment, Follower has a *destination point*
    - Will try to move toward that point
    - Upon reaching, *set new destination point*

** Map: Key Elements

   #+BEGIN_SRC java
     class PlayState extends FlxState
     {
         private FlxSprite goal;
         private List<POI> interactables; // randomly generated   
     }
   #+END_SRC

*** Points of Interest (POIs)

    - *Points of Interest* (*POIs*) in environment
    - Follower may *interact* with any POI within =Follower.bubbleSight.radius=
      - Interactions:
        - Clever quips
        - Item acquisition
        - Etc.

* Demo Time
  #+REVEAL_HTML: <object width="900" height="500"> <param name="movie" value="demo/demo.swf"> <embed src="demo/demo.swf" width="900" height="500"> </embed> </object>
